#!/usr/bin/env python
##
# rename-samples.py
# github.com/deadbits
#
# rename malware samples by abbreviated file type and md5 hash.
# specify a directory to store samples. by default a dir using the
# current timestamp will be used.
#
# this script is by no means perfect and definitely doesnt always
# accurately rename the file abbreviation, but i am too lazy to figure
# out why. its good enough for what i use it for :D
#
# for example, the following file:
# w1.exe: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
# MD5 (w1.exe) = 3f11c42687d09d4a56c715f671143a58
# would become `pe32-3f11c42687d09d4a56c715f671143a58`
##

import os
import sys
import hashlib
import datetime
import argparse
import shutil


file_types = {
    'ascii': 'ASCII text',
    'zip': 'Zip archive data, at least v2.0 to extract',
    'dll': 'PE32 executable for MS Windows (DLL)',
    'pe32': 'PE32 executable for MS Windows (GUI)',
    'elf': 'ELF ',
    'html': 'HTML document text',
    'macho': 'Mach-O',
    'pcap': 'tcpdump capture file',
    'doc': 'CDF V2 Document',
    'data': 'data',
    'text': 'ISO-8859 text',
    'error': 'ERROR: '
    }


def is_valid(file_path):
    if os.path.exists(file_path):
        if os.path.isfile(file_path):
            if os.path.getsize(file_path) > 0:
                return True
    return False


def get_filetype(f):
    try:
        import magic
        ms = magic.open(magic.MAGIC_NONE)
        ms.load()
        file_type = ms.buffer(f)
    except:
        try:
            import magic
            file_type = magic.from_buffer(f)
        except:
            import commands
            file_type = commands.getoutput('file %s' % f).split(f+':')[1]
    finally:
        try:
            ms.close()
        except:
            pass
    return file_type


def get_md5(f):
    fin = open(f, 'rb')
    m = hashlib.md5()
    while True:
        data = fin.read(8192)
        if not data:
            break
        m.update(data)
    return m.hexdigest()


def rename_file(file_path):
    md5 = get_md5(file_path)
    ftype = get_filetype(file_path)
    short_type = ''

    for key, value in file_types.iteritems():
        if value in ftype.strip():
            short_type = key
    if short_type == '':
        short_type = 'unk'

    new_name = short_type + '_' + md5
    sample_path = os.path.join(storage_path, new_name)

    if os.path.exists(sample_path):
        print '%s all ready stored!' % sample_path

    else:
        try:
            shutil.copyfile(file_path, sample_path)
            if os.path.exists(sample_path):
                print '\noriginal: %s' % file_path
                print 'new path: %s\n' % sample_path
                os.remove(file_path)
            else:
                print '\n(error) failed to copy file:'
                print '    src: %s' % file_path
                print '    dst: %s\n' % sample_path
        except:
            print '(error) stuff broke.'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='rename malware samples by file type and md5 hash')
    parser.add_argument('-f', '--file', help='rename individual file', required=False)
    parser.add_argument('-d', '--dir', help='rename all files in directory', required=False)
    parser.add_argument('-p', '--path', help='move files to this path (default: UTC timestamp created in cwd)', required=False)
    args = parser.parse_args()

    dt = datetime.datetime.isoformat(datetime.datetime.now()).split('T')[0]
    storage_path = dt
    if args.path:
        storage_path = args.path
    else:
        os.mkdir(storage_path)

    if args.dir:
        if args.file:
            print 'the flags --file and --dir may not be used together.'
            sys.exit(1)
        if os.path.exists(os.path.abspath(args.dir)):
            dir_name = (args.dir).rstrip('/')
            expanded = os.listdir(dir_name)
            for path in expanded:
                full_path = dir_name + '/' + path
                if is_valid(full_path):
                    rename_file(full_path)
                else:
                    print '(*) skipping %s' % full_path
                    pass

    if args.file:
        if is_valid(os.path.abspath(args.file)):
            rename_file(os.path.abspath(args.file))
        else:
            print '(error) file %s either does not exist or has a size of zero.' % args.file
            sys.exit(1)
